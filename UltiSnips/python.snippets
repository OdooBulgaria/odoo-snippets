global !p

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'

def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")
	if style == 'single':
		return SINGLE_QUOTES
	return DOUBLE_QUOTES

def complete(t, opts):
    if t:
        opts = [m[len(t):] for m in opts if m.startswith(t)]
    if len(opts) == 1:
        return opts[0]
    return '({0:s})'.format('|'.join(opts))

def cleanup_field_string(t):
    return re.sub(r'(id|ids)$', '', t).replace('_', ' ').rstrip(' ').title()
endglobal

snippet doc "Module top-level doc" b
# -*- coding: utf-8 -*-
# This file is part of Odoo. The COPYRIGHT file at the top level of
# this module contains the full copyright notices and license terms.
$0
endsnippet

snippet "__openerp__|__oe|__oe__|__openerp|manifest" "Odoo module manifest" br
{
    `!p snip.rv = get_quoting_style(snip)`name`!p snip.rv = get_quoting_style(snip)`: `!p snip.rv = get_quoting_style(snip)`${1:Name}`!p snip.rv = get_quoting_style(snip)`,
    `!p snip.rv = get_quoting_style(snip)`version`!p snip.rv = get_quoting_style(snip)`: `!p snip.rv = get_quoting_style(snip)`8.0.0.1.0`!p snip.rv = get_quoting_style(snip)`,
    `!p snip.rv = get_quoting_style(snip)`author`!p snip.rv = get_quoting_style(snip)`: `!p snip.rv = get_quoting_style(snip)`${2:Author}`!p snip.rv = get_quoting_style(snip)`,
    `!p snip.rv = get_quoting_style(snip)`category`!p snip.rv = get_quoting_style(snip)`: `!p snip.rv = get_quoting_style(snip)`$3`!p snip.rv = complete(t[3], ['Customer Relationship Management','Sales Management','Project Management','Knowledge Management','Warehouse Management','Manufacturing','Invoicing & Payments','Accounting & Finance','Purchase Management','Human Resources','Extra Tools','Marketing','Point of Sale','Advanced Reporting'])``!p snip.rv = get_quoting_style(snip)`,
    `!p snip.rv = get_quoting_style(snip)`website`!p snip.rv = get_quoting_style(snip)`: `!p snip.rv = get_quoting_style(snip)`https://example.com/`!p snip.rv = get_quoting_style(snip)`,
    `!p snip.rv = get_quoting_style(snip)`license`!p snip.rv = get_quoting_style(snip)`: `!p snip.rv = get_quoting_style(snip)`AGPL-3`!p snip.rv = get_quoting_style(snip)`,
    `!p snip.rv = get_quoting_style(snip)`summary`!p snip.rv = get_quoting_style(snip)`: `!p snip.rv = get_quoting_style(snip)`${4:Summary}`!p snip.rv = get_quoting_style(snip)`,
    `!p snip.rv = get_quoting_style(snip)`depends`!p snip.rv = get_quoting_style(snip)`: [
        `!p snip.rv = get_quoting_style(snip)`${5}`!p snip.rv = get_quoting_style(snip)`
    ],
    `!p snip.rv = get_quoting_style(snip)`data`!p snip.rv = get_quoting_style(snip)`: [
        `!p snip.rv = get_quoting_style(snip)`$0`!p snip.rv = get_quoting_style(snip)`,
    ],
    `!p snip.rv = get_quoting_style(snip)`installable`!p snip.rv = get_quoting_style(snip)`: True,
    `!p snip.rv = get_quoting_style(snip)`application`!p snip.rv = get_quoting_style(snip)`: False,
}
endsnippet

snippet data "Odoo manifest data key" b
`!p snip.rv = get_quoting_style(snip)`data`!p snip.rv = get_quoting_style(snip)`: [
    `!p snip.rv = get_quoting_style(snip)`$0`!p snip.rv = get_quoting_style(snip)`,
],
endsnippet

snippet bool "Boolean field" b
${1:field} = fields.Boolean(
    string=`!p snip.rv = get_quoting_style(snip)`${2:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,$0
)
endsnippet

snippet char "Char field" b
${1:field} = fields.Char(
    string=`!p snip.rv = get_quoting_style(snip)`${2:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,
    help=`!p snip.rv = get_quoting_style(snip)``!p snip.rv = get_quoting_style(snip)`,
    size=False,
    translate=False,$0
)
endsnippet

snippet text "Text field" b
${1:field} = fields.Text(
    string=`!p snip.rv = get_quoting_style(snip)`${2:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,
    help=`!p snip.rv = get_quoting_style(snip)``!p snip.rv = get_quoting_style(snip)`,
    translate=False,$0
)
endsnippet

snippet html "HTML field" b
${1:field} = fields.Html(
    string=`!p snip.rv = get_quoting_style(snip)`${2:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,
    help=`!p snip.rv = get_quoting_style(snip)``!p snip.rv = get_quoting_style(snip)`$0,
)
endsnippet

snippet date "Date field" b
${1:field} = fields.Date(
    string=`!p snip.rv = get_quoting_style(snip)`${2:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,
    help=`!p snip.rv = get_quoting_style(snip)``!p snip.rv = get_quoting_style(snip)`$0,
)
endsnippet

snippet "int(?:eger)?" "Integer field" br
${1:field} = fields.Integer(
    string=`!p snip.rv = get_quoting_style(snip)`${2:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,$0
)
endsnippet

snippet float "Float field" b
from $1`!p snip.rv = complete(t[1], ['odoo','openerp'])`.addons import decimal_precision as dp$0
${2:field} = fields.Float(
    string=`!p snip.rv = get_quoting_style(snip)`${3:`!p snip.rv = cleanup_field_string(t[2])`}`!p snip.rv = get_quoting_style(snip)`,
	digits=dp.get_precision(`!p snip.rv = get_quoting_style(snip)`${4:Account}`!p snip.rv = get_quoting_style(snip)`),
)
endsnippet

snippet binary "Binary field" b
${1:field} = fields.Binary(
    string=`!p snip.rv = get_quoting_style(snip)`${2:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,$0
)
endsnippet

snippet selection "Selection field" b
${1:field} = fields.Selection(
    string=`!p snip.rv = get_quoting_style(snip)`${2:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,
	selection=[(`!p snip.rv = get_quoting_style(snip)`${3:value}`!p snip.rv = get_quoting_style(snip)`, `!p snip.rv = get_quoting_style(snip)`${4:`!p snip.rv = t[3].title()`}`!p snip.rv = get_quoting_style(snip)`)$0],
)
endsnippet

snippet selection_add "Selection field extension with an additional value" b
${1:field} = fields.Selection(
	string=`!p snip.rv = get_quoting_style(snip)`${2:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,
	selection_add=[(`!p snip.rv = get_quoting_style(snip)`${3:value}`!p snip.rv = get_quoting_style(snip)`, `!p snip.rv = get_quoting_style(snip)`${4:`!p snip.rv = t[3].title()`}`!p snip.rv = get_quoting_style(snip)`)$0]
)
endsnippet

snippet related "Related field" b
${1:field} = fields.$2`!p snip.rv = complete(t[2], ['Binary','Boolean','Selection','Char','Date','Datetime','Text','Html','Integer','Float','Many2one','One2many','Many2many'])`(
    related=`!p snip.rv = get_quoting_style(snip)`$3.$1`!p snip.rv = get_quoting_style(snip)`,
    string=`!p snip.rv = get_quoting_style(snip)`${4:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,
    store=False,$0
)
endsnippet

snippet m2o "Many2one field" b
${1:field} = fields.Many2one(
	comodel_name=`!p snip.rv = get_quoting_style(snip)`${2:model}`!p snip.rv = get_quoting_style(snip)`,
    string=`!p snip.rv = get_quoting_style(snip)`${3:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,
	ondelete=`!p snip.rv = get_quoting_style(snip)`$4`!p snip.rv = complete(t[4], ['set null','restrict','cascade'])``!p snip.rv = get_quoting_style(snip)`,$0
)
endsnippet

snippet o2m "One2many field" b
${1:field} = fields.One2many(
	comodel_name=`!p snip.rv = get_quoting_style(snip)`${2:model}`!p snip.rv = get_quoting_style(snip)`,
	inverse_name=`!p snip.rv = get_quoting_style(snip)`${3:field}`!p snip.rv = get_quoting_style(snip)`,
	string=`!p snip.rv = get_quoting_style(snip)`${4:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,$0
)
endsnippet

snippet m2m "Many2many field" b
${1:field} = fields.Many2many(
	comodel_name=`!p snip.rv = get_quoting_style(snip)`${2:model}`!p snip.rv = get_quoting_style(snip)`,
	string=`!p snip.rv = get_quoting_style(snip)`${3:`!p snip.rv = cleanup_field_string(t[1])`}`!p snip.rv = get_quoting_style(snip)`,$0
)
endsnippet

snippet compute "Compute field" b
${1:field} = fields.$2`!p snip.rv = complete(t[2], ['Binary','Boolean','Selection','Char','Date','Datetime','Text','Html','Integer','Float','Many2one','One2many','Many2many'])`(compute=`!p snip.rv = get_quoting_style(snip)`_compute_$1`!p snip.rv = get_quoting_style(snip)`)

@api.depends('${3:field}')
def _compute_$1(self):
    for record in self:
        record.$1 = $0
endsnippet

snippet onchange "Onchange handler" b
@api.onchange(`!p snip.rv = get_quoting_style(snip)`${1:field}`!p snip.rv = get_quoting_style(snip)`)
def _onchange_$1(self):
	self.${2:other} = $0
endsnippet

snippet "constrain(?:[ts])?" "Python constrain" br
from $1`!p snip.rv = complete(t[1], ['odoo','openerp'])` import _, api, exceptions$0

@api.multi
@api.constrains(`!p snip.rv = get_quoting_style(snip)`${2:field}`!p snip.rv = get_quoting_style(snip)`)
def _check_$2(self):
    for rec in self:
        if rec.$2 == ${3:value}:
            raise exceptions.ValidationError(_(`!p snip.rv = get_quoting_style(snip)`${4:Error}`!p snip.rv = get_quoting_style(snip)`))
endsnippet

snippet "name_?get" "name_get() function" br
@api.multi
def name_get(self):
    result = []
    for rec in self:
        result.append((rec.id, u`!p snip.rv = get_quoting_style(snip)`${1:%s %s}`!p snip.rv = get_quoting_style(snip)` % (${2:rec.id, rec.name})))$0
    return result
endsnippet

snippet model "New model" b
class $2`!p snip.rv = ''.join(map(lambda w: w.title(), t[1].split('.')))`(models.Model):
	_name = `!p snip.rv = get_quoting_style(snip)`${1:model_name}`!p snip.rv = get_quoting_style(snip)`
	_description = `!p snip.rv = get_quoting_style(snip)`$3`!p snip.rv = t[1].replace(".", " ").title()``!p snip.rv = get_quoting_style(snip)`

	$0
endsnippet

snippet inherit "Model inheritance" b
class $2`!p snip.rv = ''.join(map(lambda w: w.title(), t[1].split('.')))`(models.Model):
	_inherit = `!p snip.rv = get_quoting_style(snip)`${1:base_model}`!p snip.rv = get_quoting_style(snip)`

	$0
endsnippet

snippet amodel "Abstract model" b
class $2`!p snip.rv = ''.join(map(lambda w: w.title(), t[1].split('.')))`(models.AbstractModel):
	_name = `!p snip.rv = get_quoting_style(snip)`${1:model_name}`!p snip.rv = get_quoting_style(snip)`

	$0
endsnippet

snippet wizard "Transient model" b
class $2`!p snip.rv = ''.join(map(lambda w: w.title(), t[1].split('.')))`(models.TransientModel):
	_name = `!p snip.rv = get_quoting_style(snip)`${1:base_model}`!p snip.rv = get_quoting_style(snip)`
	_description = `!p snip.rv = get_quoting_style(snip)`$3`!p snip.rv = t[1].replace(".", " ").title()``!p snip.rv = get_quoting_style(snip)`

	$0
endsnippet

snippet controller "Basic HTTP controller" b
from $1`!p snip.rv = complete(t[1], ['odoo','openerp'])` import http
from $1.http import request


class ${2:Controller}(http.Controller):

    @http.route(`!p snip.rv = get_quoting_style(snip)`/${3:index}`!p snip.rv = get_quoting_style(snip)`, type=`!p snip.rv = get_quoting_style(snip)`$5`!p snip.rv = complete(t[5], ['http','json'])``!p snip.rv = get_quoting_style(snip)`, auth=`!p snip.rv = get_quoting_style(snip)`$6`!p snip.rv = complete(t[6], ['user','public','none'])``!p snip.rv = get_quoting_style(snip)`)
    def $4`!p snip.rv = t[3].replace('/', '_')`(self, *args, **kwargs):
        return request.render($0)
endsnippet

snippet route "HTTP route method" b
@http.route(`!p snip.rv = get_quoting_style(snip)`/${1:index}`!p snip.rv = get_quoting_style(snip)`, type=`!p snip.rv = get_quoting_style(snip)`$3`!p snip.rv = complete(t[3], ['http','json'])``!p snip.rv = get_quoting_style(snip)`, auth=`!p snip.rv = get_quoting_style(snip)`$4`!p snip.rv = complete(t[4], ['user','public','none'])``!p snip.rv = get_quoting_style(snip)`)
def $2`!p snip.rv = t[1].replace('/', '_')`(self, *args, **kwargs):
    return request.render($0)
endsnippet

snippet multi "@api.multi method" b
@api.multi
def ${1:method}(self, ${2:args}):
	for rec in self:
		$0
endsnippet

snippet one "@api.one method" b
@api.multi
def ${1:method}(self, ${2:args}):
	self.ensure_one()
	$0
endsnippet

snippet "testtx|test_tx|tx_test|txtest" "Odoo transaction test case" br
from $1`!p snip.rv = complete(t[1], ['odoo','openerp'])`.tests import common


class Test${2:Foo}(common.TransactionCase):

    def test_${3:bar}(self):
        $0
endsnippet